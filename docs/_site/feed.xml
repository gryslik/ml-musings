<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/ml-musings/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/ml-musings/" rel="alternate" type="text/html" /><updated>2022-08-07T23:13:50-04:00</updated><id>http://localhost:4000/ml-musings/feed.xml</id><title type="html">ML Musings</title><subtitle>An exploration of machine learning</subtitle><entry><title type="html">Lunar Lander - Part 3</title><link href="http://localhost:4000/ml-musings/lander/2022/06/05/lander3.html" rel="alternate" type="text/html" title="Lunar Lander - Part 3" /><published>2022-06-05T14:16:40-04:00</published><updated>2022-06-05T14:16:40-04:00</updated><id>http://localhost:4000/ml-musings/lander/2022/06/05/lander3</id><content type="html" xml:base="http://localhost:4000/ml-musings/lander/2022/06/05/lander3.html">&lt;p&gt;In part two of the lunar lander series, we showcased the basics of how our AI agent trains and creates models
for flying the lander successfully, however, lots of questions were left unanswered about our design choices. This
third and final post will answer the why behind our hyper parameter and architecture choices.&lt;/p&gt;

&lt;h3&gt;Background knowledge&lt;/h3&gt;
&lt;h4&gt;Neural net&lt;/h4&gt;
&lt;p&gt;In post 2, we showcased the neural net structure and left it at that. Now let’s dive into how a neural net works.
The below image gives a visual representation of what you already know.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ml-musings/assets/images/neuralnetsimple.png&quot; alt=&quot;Neural net Simple&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Data that gets passed into an input layer,
some hidden layers transform the input, and we get an output through the output layer. 
But how does the data get passed through each node? The diagram below illustrates that process for each node.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ml-musings/assets/images/neuralnet1node.png&quot; alt=&quot;Neural net detailed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each layer of the net is connected to the previous layer, and each node-to-node connection has a certain &lt;em&gt;weight&lt;/em&gt;.
For each node, the previous nodes connecting to it are the &lt;em&gt;inputs&lt;/em&gt;. Every input gets multiplied by a weight and has a &lt;em&gt;bias&lt;/em&gt;
added to it, and then they all get summed up. This is the &lt;em&gt;weighted sum&lt;/em&gt;.
The weighted sum is passed into an &lt;em&gt;activation function&lt;/em&gt; which returns an output. This output is the value 
of a single node in the next layer.&lt;/p&gt;

&lt;p&gt;There are a couple types of activation functions, some of the most common being linear, relu, and sigmoid. All they
do is given a value x, pass it into a function that returns a new value. For example f(x) = k * x is a linear 
activation function that returns x multiplied by some constant k. Relu and sigmoid are just more complex, nonlinear functions.&lt;/p&gt;

&lt;p&gt;So essentially:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Input layer values are set by the data (observations)&lt;/li&gt;
  &lt;li&gt;Each node in the next layer calculates its value by getting the weighted sum of all the nodes in the previous layer
and passing the weighted sum through an activation function&lt;/li&gt;
  &lt;li&gt;Repeat step 2 until we’re out of the neural net&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This happens every single frame of lunar lander. An observation about the environment gets passed in, and the neural net
spits out an action through the above process. But how does the agent optimize the neural net?&lt;/p&gt;

&lt;h4&gt;Action -&amp;gt; Response -&amp;gt; Reward&lt;/h4&gt;
&lt;p&gt;In reinforcement learning, this is the basic learning cycle. As displayed below, an agent takes an action and
predicts the reward of this action.
The action produces a response from the environment, with both a new state and actual reward. The agent compares its predicted reward 
to the actual reward. The agent optimizes itself based on the deviation, and takes a new action. This is done by changing
the weights and biases within its neural net through a process called backpropagation. &lt;em&gt;The structure of the neural net never
changes, only the weights and biases change.&lt;/em&gt;
This pattern continues until the agent is able to accurately predict the rewards of actions, and then the agent knows
what actions to take.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ml-musings/assets/images/rlcycle.png&quot; alt=&quot;Reinforcement Learning Cycle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You may remember a hyper parameter we defined in the last post, epsilon, alongside minimum epsilon and epsilon decay.
Epsilon ranges from 0-1 and is the probability that we choose a random action over what we think will be best. When we
start the agent, it has a high epsilon and thus chooses mostly random values, but tries to predict the reward each time.
As it makes predictions and sees the results, it fine tunes its ability to make predictions. This is done by changing 
the weights within the neural net. Eventually, it starts choosing what it believes to be the optimum action instead of
a random one, how fast this happens depends on our initial epsilon and epsilon decay.&lt;/p&gt;

&lt;p&gt;This can be seen in the below act function, which is responsible for performing and returning an action&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;# Take an action given the current state
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilon_decay&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Multiply our epsilon by the decay
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilon_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Never let epsilon go below the minium value
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Generate a random number 0-1, if it's less than episolon, do a random action
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Otherwise, pick what we believe to be the best action
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;An agent predicts the best action using something called the Bellman Equation&lt;/p&gt;

&lt;h4&gt;Bellman Equation&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.geeksforgeeks.org/bellman-equation/&quot;&gt;Bellman’s Equation&lt;/a&gt;
, as said in the linked article, states that the long-term reward of an action is equal to the reward of
the action itself plus the expected reward from the following actions.&lt;/p&gt;

&lt;p&gt;To understand this better, let’s use a concrete example from the Lunar Lander scenario. When the lander touches a leg
to the ground, it earns a certain number of points, but when the lander crashes it loses significantly more points.
If the lander tries to land too fast, it will first gain points for touching the ground, and then lose all those points
and many more for crashing. The Bellman’s equation will produce a low reward for attempting to land when
moving too fast because the future reward is highly negative.&lt;/p&gt;

&lt;p&gt;The learning agent uses the Bellman Equation to predict the value of the current state.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ml-musings/assets/images/bellman.png&quot; alt=&quot;Bellman Equation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;V(s) is the value of state s&lt;/li&gt;
  &lt;li&gt;max a denotes the optimal action in the current state&lt;/li&gt;
  &lt;li&gt;R(s, a) is the reward for action a in state s&lt;/li&gt;
  &lt;li&gt;γ is gamma a.k.a the discount factor (one of our hyper parameters) and ranges from 0-1&lt;/li&gt;
  &lt;li&gt;s’ is the next state resulting from taking action a in state s&lt;/li&gt;
  &lt;li&gt;V(s’) is the value of the next state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To summarize, the value of our current state is equal to the reward of taking the optimal action in the current state
plus the discount factor times the value of the resulting state.&lt;/p&gt;

&lt;h3&gt;Understanding optimality of our hyper parameters&lt;/h3&gt;
&lt;p&gt;With the background knowledge, we can now infer why our chosen parameters are optimal&lt;/p&gt;

&lt;h4&gt;Discount factor&lt;/h4&gt;
&lt;p&gt;Discount factor, or gamma, was used in the Bellman Equation to give a weight to the value of future predicted rewards.
This essentially controls how far into the future we look, with a larger discount factor giving us farther vision into the future.
We’ve set our gamma very high, at 0.99. Why? Think about how many frames are in a single game of lunar lander. &lt;em&gt;A lot&lt;/em&gt;.
If we only take a couple frames into account when making predictions, there’s no way we’ll build an accurate model. Not a
lot changes in between frames, so maximizing the discount factor ensures we look far enough into the future to make accurate
predictions.&lt;/p&gt;

&lt;p&gt;Gamma was initially guessed at 0.9, which produced bad results, however 0.99 worked just fine&lt;/p&gt;

&lt;h4&gt;Epsilon&lt;/h4&gt;
&lt;p&gt;Just like gamma needed to be set very high because of the number of frames per game, so does epsilon need to be set high
and epsilon decay needs to be slow. Each individual frame has little impact on the outcome. If epsilon
decay happens quickly, the model will start taking “optimal actions” far before it knows what “optimal” is. This may
cause the agent to get stuck in what’s called a local minima. Essentially, the agent will continue to take similar actions
again and again because it thinks other actions are sub-optimal, even if its current behavior is bad. An example of this
would be cutting the engine completely and letting the lander crash because of the reward from touching the legs.&lt;/p&gt;

&lt;p&gt;We prevent this with a high epsilon and slow decay, causing the model to train on lots of random actions before picking
optimal actions.&lt;/p&gt;

&lt;p&gt;Epsilon decay was guessed at around 0.9, but this wasn’t high enough initially and produced very bad results.
Then 0.99 was attempted, followed by 0.999. This was then decremented to 0.998, 0.997, etc and 0.996 was found to be
the optimal value&lt;/p&gt;

&lt;h4&gt;Learning rate&lt;/h4&gt;
&lt;p&gt;Learning rate needs to be &lt;em&gt;sloooooow&lt;/em&gt;, also because of the minimum impact of each frame. We want our agent to slowly adjust
it’s behavior from each frame for this reason. We have many, many frames, each very similar to the last. By setting
a slow learning rate, we prevent the agent from over-adjusting from each action.&lt;/p&gt;

&lt;p&gt;“Oh, firing the engine in this frame was better than not firing the engine? Okay, let me fire the main engine for 
EVERY SINGLE FRAME FROM NOW ON”&lt;/p&gt;

&lt;p&gt;Bad idea.&lt;/p&gt;

&lt;p&gt;Currently, the learning rate is set to 0.01, this was found by setting it to a low value of 0.1 and dividing by 10 
until a workable figure was found. Increasing the learning rate to 0.01, for example, results in complete failure and the
agent unable to succeed even by episode 500.&lt;/p&gt;

&lt;h3&gt;Optimality of neural net design&lt;/h3&gt;

&lt;p&gt;With our neural net, 2 things were predetermined based on the environment, that being input and output dimension.
The hidden layers, activation functions, and loss function were things we had to choose.&lt;/p&gt;

&lt;p&gt;To review, we have two hidden layers, the first one having 150 and the second one having 120 nodes. Both use
the relu activation function. The output layer uses a linear activation function. The loss function we are using is
means squared error (mse).&lt;/p&gt;

&lt;h4&gt;Node and layer counts&lt;/h4&gt;
&lt;p&gt;Quite frankly, it is very difficult to say for sure that a particular node/layer count is optimal. It’s very much
an experimental process until the best one is discovered. Having too many layers can create a model that’s overfitted
to the training (meaning it won’t generalize well to environments different than the ones it trained on),
and too few causes the model to be too simple and fail to properly train for any environment.
Two hidden layers worked well, so we stuck with that.&lt;/p&gt;

&lt;p&gt;For node count, a commonly used strategy is to gradually decrease the node count in the hidden layers. This is why
we went from 150 to 120. Once again, there are no clear “rules” here. It’s best to experiment and find what works best&lt;/p&gt;

&lt;h4&gt;Activation functions&lt;/h4&gt;
&lt;p&gt;We used relu as the activation function for the hidden layers, and linear for the output.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A relu activation function is the same as linear, except that the minimum output of relu is always 0&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It is one of the most commonly used activation functions and often the default, so we felt no need to deviate.&lt;/p&gt;

&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;Hopefully, this example has given you an idea of the basics of reinforcement learning, the different components
involved in the process and how it can be fine tuned for better results. In our next series, we will be doing
reinforcement learning on a more complicated environment, Mario. Stay tuned!&lt;/p&gt;</content><author><name>Daniel Mogilevsky</name></author><category term="Lander" /><summary type="html">In part two of the lunar lander series, we showcased the basics of how our AI agent trains and creates models for flying the lander successfully, however, lots of questions were left unanswered about our design choices. This third and final post will answer the why behind our hyper parameter and architecture choices.</summary></entry><entry><title type="html">Mario - Part 1</title><link href="http://localhost:4000/ml-musings/mario/2022/06/05/mario1.html" rel="alternate" type="text/html" title="Mario - Part 1" /><published>2022-06-05T14:16:40-04:00</published><updated>2022-06-05T14:16:40-04:00</updated><id>http://localhost:4000/ml-musings/mario/2022/06/05/mario1</id><content type="html" xml:base="http://localhost:4000/ml-musings/mario/2022/06/05/mario1.html">&lt;h2&gt; Introduction &lt;/h2&gt;
&lt;p&gt;Having completed the Lunar Lander series, we are now moving on to a more challenging game, Mario.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ml-musings/assets/videos/mario_display.gif&quot; alt=&quot;Mario Game&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unlike the previous project, Lunar Lander, Mario will involve an amount of training time unfeasible for your personal
machine. This blog post will assume you’ve read through the Lunar Lander post and are familiar with how a neural net works
and what the different hyper-parameters do. It will not include a detailed walkthrough of setting up the project
locally, since the reader is unlikely to benefit from doing so.&lt;/p&gt;

&lt;h2&gt; Environment &lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://pypi.org/project/gym-super-mario-bros/&quot;&gt;Mario Environment&lt;/a&gt; we are using has the following main objectives,
moving as far to the right as possible and reaching the flag. The aim is to do this as fast as possible without dying.
This is accomplished by tracking the x position of mario in the game and the in game clock. 
The are also various mario stages available, as well as downsampling of stages. We will be training mario on the
first stage without any downsampling.&lt;/p&gt;

&lt;p&gt;Unlike Lunar Lander, the Mario agent uses a special kind of neural net called a convolutional neural net.&lt;/p&gt;

&lt;h2&gt;Convolutional Neural Network (CNN) &lt;/h2&gt;

&lt;p&gt;A CNN is a type of neural net used analyze visual imagery. In Lunar Lander, the environment gave us some explicit 
information about the environment state, such as the location of the lander and its velocity. In Mario, we will be
analyzing the actual game frames (images) similar to a human player to make decisions. This is done by passing each frame
as image data into a CNN, and using the output as action. A detailed representation of this process is shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ml-musings/assets/images/cnn.png&quot; alt=&quot;CNN&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Mario Project Learning Agent&lt;/h2&gt;

&lt;p&gt;Overall, the agent is very similar in structure to the Lunar Lander one, however. The main differences are the
neural net structure and hyper-parameters. Below, the neural net is created which has 3 convolutional layers
and takes as input the image of the mario game. After the convolutional layers, the data is flattened (meaning has its
dimensions reduced) and is then passed into a regular neural net with a node count of 512 and an output layer representing
the action space.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conv2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;single_frame_dim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;single_frame_dim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_frames_to_stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conv2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conv2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;losses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Huber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optimizers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Adam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;learning_rate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;learning_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;## huber loss takes advantage of l1/l2
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The hyper-parameters are also different.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DQN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;single_frame_dim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;num_frames_to_stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_model_filepath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_epsilon_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;#self.memory = collections.deque(maxlen=10000) #this is slow. Using my custom class.
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;burnin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReplayMemory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gamma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.9&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilon_min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.02&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilon_decay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.999995&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;learning_rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.00025&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_target_step_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_steps_since_last_update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;single_frame_dim&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;single_frame_dim&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_frames_to_stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_frames_to_stack&lt;/span&gt;


        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_model_filepath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Will do the actual predictions
&lt;/span&gt;            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Will compute what action we DESIRE from our model
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_model_filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_model_filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_epsilon_value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The training logic can be found in Mario_Trainer.py. It’s also very similar to the lunar lander code.&lt;/p&gt;

&lt;h2&gt; Training the models &lt;/h2&gt;

&lt;p&gt;Here’s the training progress:&lt;/p&gt;

&lt;p&gt;Episode 0, where we only move right:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ml-musings/assets/videos/mario-0.gif&quot; alt=&quot;Mario 0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Episode 500, where we’ve learned nothing:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ml-musings/assets/videos/mario-500.gif&quot; alt=&quot;Mario 500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Episode 1500, now we can jump:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ml-musings/assets/videos/mario-1500.gif&quot; alt=&quot;Mario 1500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Episode 3000, we’re better at jumping but we get stuck against walls:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ml-musings/assets/videos/mario-3000.gif&quot; alt=&quot;Mario 3000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Episode 5000, even better at jumping but we still get stuck:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ml-musings/assets/videos/mario-5000.gif&quot; alt=&quot;Mario 5000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Episode 7000 Victory!:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ml-musings/assets/videos/mario-7000.gif&quot; alt=&quot;Mario 7000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Although there were many successes along the way, the model continued to fail until becoming more consistent around
the 7000 mark.&lt;/p&gt;

&lt;p&gt;But what happens if we try to use this model on a new mario level? What degree of success will we have then?&lt;/p&gt;

&lt;p&gt;The results are…atrocious&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ml-musings/assets/videos/mario-7000-2.gif&quot; alt=&quot;Mario 7000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ml-musings/assets/videos/mario-7000-3.gif&quot; alt=&quot;Mario 7000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clearly, our model only works on the level it was trained on. We have overtrained our model to the specific mario level 
we used, and this prevents our model from actually performing well at Mario. In future blog posts, we’ll explore
why this happened and how we can generate a model that can beat all levels of Mario. Stay tuned&lt;/p&gt;</content><author><name>Daniel Mogilevsky</name></author><category term="Mario" /><summary type="html">Introduction Having completed the Lunar Lander series, we are now moving on to a more challenging game, Mario.</summary></entry><entry><title type="html">Lunar Lander - Part 2</title><link href="http://localhost:4000/ml-musings/lander/2022/05/21/lunar-lander2.html" rel="alternate" type="text/html" title="Lunar Lander - Part 2" /><published>2022-05-21T14:16:40-04:00</published><updated>2022-05-21T14:16:40-04:00</updated><id>http://localhost:4000/ml-musings/lander/2022/05/21/lunar-lander2</id><content type="html" xml:base="http://localhost:4000/ml-musings/lander/2022/05/21/lunar-lander2.html">&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;In the previous post, we provided an overview of the lunar lander environment and got our solution
installed and running. In this post, we’ll talk about the structure of the solution and what’s happening as we train
our agent.&lt;/p&gt;

&lt;h3&gt;Structure&lt;/h3&gt;
&lt;p&gt;By now you’ve probably taken note of the files in the project directory:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Constants.py: Stores directory paths and strings we use throughout the project&lt;/li&gt;
  &lt;li&gt;main.py: Starting point for the project that calls the necessary functions based on user inputs&lt;/li&gt;
  &lt;li&gt;eagle_large.py: File with all the AI logic and functions for training, recording videos, saving models, etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s dive into how the learning agent was created&lt;/p&gt;
&lt;h3&gt;Creating the learning agent&lt;/h3&gt;
&lt;p&gt;Our agent is responsible for fine tuning the model used to fly the lander, below are the parts of the agent
we had to define before the training process could start.&lt;/p&gt;

&lt;h4&gt;Hyper Parameters&lt;/h4&gt;
&lt;p&gt;Hyper parameters are parameters that control the learning process rather than the performance of the model itself. 
The following hyper parameters must be decided when creating our learning agent:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Learning rate (from 0-1): This determines how quickly the agent will pick up new values&lt;/li&gt;
  &lt;li&gt;Gamma a.k.a Discount factor (0-1): How much weight is given to the reward of future actions when calculating the value
of a certain action&lt;/li&gt;
  &lt;li&gt;Epsilon decay, initial, and minimum: Epsilon is the probability that we choose a random action for the current frame instead of a 
optimal action. Epsilon decay is the value by which epsilon decreases each frame.&lt;/li&gt;
  &lt;li&gt;Memory store: How large of a memory store we want to keep. In our agents memory, we store a state, action, reward for the
state+action, the resulting state, and whether this action ended the episode.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Through researching how other people have solved this environment the following hyper parameters were discovered to be optimal:
&lt;a href=&quot;https://github.com/gryslik/ml-musings/blob/109d54e39476636e714b686a1c63ef71da54d1ae/lunar_lander/eagle_large.py#L16-L25&quot;&gt;Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DQN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxlen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gamma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.99&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilon_min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilon_decay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.996&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;learning_rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.001&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Will do the actual predictions
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In a later blog post, we’ll discuss why these particular parameters are optimal. For now, it’s sufficient to understand
what they are and how they impact our agent.&lt;/p&gt;

&lt;h4&gt;Model Structure - Neural Net&lt;/h4&gt;
&lt;p&gt;The agent itself doesn’t fly the lander, and the hyper parameters just inform how the agent trains itself, the &lt;em&gt;model&lt;/em&gt;
is what actually flies the lander. The model is a part of the agent and something the agent fine-tunes over time. 
We are using a neural net for our model. A neural net consists of an input, hidden, and output layer
and takes input (the agent’s observations about the environment) and turns them into outputs (actions).
We’ll discuss how exactly a neural net works later on, for now it is sufficient to understand the above. 
For our neural net, we are using a &lt;a href=&quot;https://keras.io/guides/sequential_model/&quot;&gt;Keras Sequential Model&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have found the following structure to work well:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Input layer with 8 nodes representing the observation space ((x and y coordinates of the lander, x and y linear velocities, angle, angular velocity, two booleans representing the legs
touching the ground))&lt;/li&gt;
  &lt;li&gt;Hidden layer with 150 nodes&lt;/li&gt;
  &lt;li&gt;Hidden layer with 120 nodes&lt;/li&gt;
  &lt;li&gt;Output layer with 4 nodes representing the action space (do nothing, fire left engine, fire main engine, fire right engine)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is the code for this initialization
&lt;a href=&quot;https://github.com/gryslik/ml-musings/blob/109d54e39476636e714b686a1c63ef71da54d1ae/lunar_lander/eagle_large.py#L27-L34&quot;&gt;Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;create_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;state_shape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;observation_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_dim&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state_shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;linear&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mean_squared_error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optimizers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Adam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;learning_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once again, don’t sweat the details right now, in our next post, we’ll do that in the final post.&lt;/p&gt;

&lt;p&gt;Lastly, our class has two helper functions, &lt;em&gt;act&lt;/em&gt; and &lt;em&gt;remember&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Act&lt;/em&gt;, shown below, is causes the agent to take an action given a game/environment state. The details of how epsilon
is used will be made clear in the last post, but astute readers will see that epsilon determines whether the
agent picks a random action or what it believes to be the ideal action.
&lt;a href=&quot;https://github.com/gryslik/ml-musings/blob/109d54e39476636e714b686a1c63ef71da54d1ae/lunar_lander/eagle_large.py#L63-L69&quot;&gt;Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilon_decay&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Multiply our epsilon by the decay
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilon_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Never let epsilon go below the minium value
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Generate a random number 0-1, if it's less than episolon, do a random action
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Otherwise, pick what we believe to be the best action
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Remember&lt;/em&gt; causes the agent to remember the previous state, the action it took in that state, the reward of the action,
the resulting/new state from that action, and whether the game reached completion from the action. It remembers this
by appending all of these details into the memory buffer
&lt;a href=&quot;https://github.com/gryslik/ml-musings/blob/109d54e39476636e714b686a1c63ef71da54d1ae/lunar_lander/eagle_large.py#L37&quot;&gt;Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;Training the agent&lt;/h3&gt;

&lt;p&gt;If you followed the instructions on the previous blog post and have the training running in the background,
you’ve likely taken note of the output and perhaps even saw an instance or two of the lander in action.&lt;/p&gt;

&lt;p&gt;Let’s dive into what’s happening in the training cycle.&lt;/p&gt;

&lt;p&gt;We started by creating the environment, picking the number of episodes we’ll train the agent for, initializing
the agent, and creating variables to track total reward and # of steps per episode&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/gryslik/ml-musings/blob/109d54e39476636e714b686a1c63ef71da54d1ae/lunar_lander/eagle_large.py#L155-L196&quot;&gt;Link to Code&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;train_agent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'LunarLander-v2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num_episodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_agent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DQN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;totalreward&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For each episode, we start at step 0 with a fresh environment and an accumulated reward of 0.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;episode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_episodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;======================================================&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Processing episode: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;episode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;======================================================&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;time_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Reset the environment
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;episode_reward&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Until the episode terminates, the following cycle occurs:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;The agent decides on an action based on the current state.
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_agent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;We take the action and get back a new state, the reward for the action, and whether we are done with the episode(as per the episode
termination conditions mentioned before).
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;new_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;new_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;We make the agent remember the action it took on the previous state and
the result of that action
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;my_agent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;The agent replays this event to learn from it.
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;my_agent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;We update environment state, add the reward of the action taken to the total reward, and increment the step.
We also check if we are done with this episode.
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;         &lt;span class=&quot;n&quot;&gt;cur_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_state&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;episode_reward&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These values are what you see printed to the console when you train the agent.&lt;/p&gt;

&lt;p&gt;Here’s how the models progressed as we trained them:&lt;/p&gt;

&lt;p&gt;First attempt (model 0) goes terribly
&lt;img src=&quot;/ml-musings/assets/videos/lander_crash.gif&quot; alt=&quot;crash&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By model 40, the lander learns how to hover above the goal area without crashing:
&lt;img src=&quot;/ml-musings/assets/videos/lander_hover.gif&quot; alt=&quot;hover&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At model 110, the lander is landing, but not quite in the goal post
&lt;img src=&quot;/ml-musings/assets/videos/almost.gif&quot; alt=&quot;almost&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By model/episode 140, the lander is landing in the goal area perfectly:
&lt;img src=&quot;/ml-musings/assets/videos/perfect.gif&quot; alt=&quot;perfect&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;After only 140 episodes of training, our AI can play lunar lander better than
most human players. In our final blog post, we’ll analyze why our hyper parameters and neural net structure work
and the math behind them.&lt;/p&gt;</content><author><name>Daniel Mogilevsky</name></author><category term="Lander" /><summary type="html">Introduction In the previous post, we provided an overview of the lunar lander environment and got our solution installed and running. In this post, we’ll talk about the structure of the solution and what’s happening as we train our agent.</summary></entry><entry><title type="html">Lunar Lander - Introduction</title><link href="http://localhost:4000/ml-musings/lander/2022/05/20/lunar-lander.html" rel="alternate" type="text/html" title="Lunar Lander - Introduction" /><published>2022-05-20T14:16:40-04:00</published><updated>2022-05-20T14:16:40-04:00</updated><id>http://localhost:4000/ml-musings/lander/2022/05/20/lunar-lander</id><content type="html" xml:base="http://localhost:4000/ml-musings/lander/2022/05/20/lunar-lander.html">&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;In reinforcement learning, an agent (an entity that makes decisions) gets rewarded or 
punished for its actions, and over time optimizes itself to better perform as it learns what actions yield the highest reward.&lt;/p&gt;

&lt;p&gt;In this series, we use reinforcement learning to make an intelligent lunar lander playing AI.&lt;/p&gt;

&lt;p&gt;The rules of Lunar Lander are simple. The user controls a lander by firing a combination of three thrusters:
down, left, and right. The player must fire these thrusters in a way to safely land within the area marked by the flags.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ml-musings/assets/images/lunar_lander.png&quot; alt=&quot;Lunar Lander Game Guide&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Environment&lt;/h3&gt;
&lt;p&gt;To play this game with an AI, we will be using the &lt;a href=&quot;https://www.gymlibrary.ml/environments/box2d/lunar_lander/&quot;&gt;Gym Box2D lunar lander environment&lt;/a&gt;. 
This environment takes care of many things for us, such as creating the actual game, its rules, and providing a way
for our AI to play the game. The environment specifies the following rewards and punishments:&lt;/p&gt;

&lt;p&gt;Rewards:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Moving from the top of the screen to the landing pad yields 100-140 points, which are lost if the lander moves away from the landing zone&lt;/li&gt;
  &lt;li&gt;Each leg that contacts the ground yields 10 points&lt;/li&gt;
  &lt;li&gt;If the lander comes to rest, it gets 100 points&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Punishments:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Firing the down thruster is -0.3 points per frame&lt;/li&gt;
  &lt;li&gt;Firing either of the side thrusters is -0.03 points per frame&lt;/li&gt;
  &lt;li&gt;Crashing the lander is -100 points&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each iteration of the game is an “episode”, and an episode ends when the lander comes to rest, crashes, leaves the screen, or achieves a certain score (200).
If the agent ends the episode with a score of 200 or more, the game has been won.&lt;/p&gt;

&lt;p&gt;An episode is split into “frames”, a frame being the smallest time slice in a game (FPS in a video game). Our agent
makes calculations every frame. You’ll see this referenced often.&lt;/p&gt;

&lt;p&gt;For more information, visit the Lunar Lander environment link above.&lt;/p&gt;

&lt;p&gt;Now that we understand our constraints, let’s get our solution setup and working.&lt;/p&gt;

&lt;h3&gt;Setting up the project&lt;/h3&gt;

&lt;p&gt;Before installing everything we need, you can do the optional step of installing &lt;a href=&quot;https://www.anaconda.com/&quot;&gt;Anaconda&lt;/a&gt;
and &lt;a href=&quot;https://www.machinelearningplus.com/deployment/conda-create-environment-and-everything-you-need-to-know-to-manage-conda-virtual-environment/&quot;&gt;creating a conda environment&lt;/a&gt;. 
This is recommended, but completely unnecessary, so feel free to skip this step if you are fine with installing python
packages outside of a virtual environment.&lt;/p&gt;

&lt;p&gt;Now, the following must be installed for our project to run:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Python 3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://numpy.org/install/&quot;&gt;Numpy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tensorflow.org/install/&quot;&gt;Tensorflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/gym/&quot;&gt;Gym&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/pandas/&quot;&gt;Pandas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;Git&lt;/a&gt; (Optional, makes it easy to clone the Git repository with all our code)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you have the above, clone the &lt;a href=&quot;https://github.com/gryslik/ml-musings/tree/lunar_lander&quot;&gt;Lunar Lander Git repo&lt;/a&gt; by
running the following in a terminal&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git clone git@github.com:gryslik/ml-musings.git&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;Running the trainer&lt;/h3&gt;
&lt;p&gt;To run the project, go into the project directory and from the terminal run:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python3 main.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When prompted, enter “1” to start training the agent. This will take a while. Your output should
look like the below and continue for a while&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;======================================================
Processing episode: 0
======================================================
1/1 [==============================] - 1s 857ms/step
1/1 [==============================] - 0s 60ms/step
1/1 [==============================] - 0s 40ms/step
1/1 [==============================] - 0s 52ms/step
1/1 [==============================] - 0s 23ms/step
1/1 [==============================] - 0s 18ms/step
2022-06-29 18:58:58.907627: W tensorflow/core/data/root_dataset.cc:247] Optimization loop failed: CANCELLED: Operation was cancelled
2022-06-29 18:58:58.950908: W tensorflow/core/data/root_dataset.cc:247] Optimization loop failed: CANCELLED: Operation was cancelled
1/1 [==============================] - 0s 17ms/step
1/1 [==============================] - 0s 11ms/step
1/1 [==============================] - 0s 18ms/step
2022-06-29 18:58:59.378810: W tensorflow/core/data/root_dataset.cc:247] Optimization loop failed: CANCELLED: Operation was cancelled
1/1 [==============================] - 0s 14ms/step
1/1 [==============================] - 0s 12ms/step
1/1 [==============================] - 0s 16ms/step
--------------------------------------------------------
Episode: 0 completed in: 78 steps.
--------------------------------------------------------
Failed to complete episode: 0 with a total reward of: -137.2459988101599
Processing episode: 0 took: 3 seconds. Avg running reward is: -137.2459988101599
======================================================
Processing episode: 1
======================================================
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;While the agent is training, check
out the next blog post which talks about the project structure and what's happening as you're waiting.&lt;/h3&gt;</content><author><name>Daniel Mogilevsky</name></author><category term="Lander" /><summary type="html">Introduction In reinforcement learning, an agent (an entity that makes decisions) gets rewarded or punished for its actions, and over time optimizes itself to better perform as it learns what actions yield the highest reward.</summary></entry></feed>